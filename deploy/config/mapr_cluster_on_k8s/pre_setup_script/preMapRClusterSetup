#!/bin/bash
set -x
SEQ=/usr/bin/seq

setupLabels() {
NO_OF_NODES=$1
MAPR_NODES=""
MAPR_CLDB_NODES=""
MAPR_DATA_NODES=""
MAPR_RESERVE_NODES=()
NO_OF_RESERVE_NODES=$2
NO_OF_CLDB_NODES=$3
NO_OF_DATA_NODES=$4
NO_OF_WEB_NODES=$5
COUNT=0
NO_OF_CLDB_DATA_RESERVE_NODES=`expr $NO_OF_RESERVE_NODES + $NO_OF_CLDB_NODES + $NO_OF_DATA_NODES`

if [ $# -ne 5 ]
  then
   echo "Usage: preMapRClusterSetup <no of nodes> \
	<no of zookeeper node> \
	<no of cldb nodes> \
	<no of data nodes>"
   exit 1;
elif [[ ($NO_OF_NODES -eq $NO_OF_RESERVE_NODES) || ($NO_OF_NODES -lt $NO_OF_RESERVE_NODES) ]]
   then
	echo "No of webserver node can't be equal or greater then total number of nodes"
	exit 1;
elif [[ (($NO_OF_NODES -lt $NO_OF_CLDB_DATA_RESERVE_NODES)) ]]
   then
	echo "Total number of nodes should be higher than no of nodes for cldb,datai,reserve and webserver"
	exit 1;
fi

MAPR_NODES=(`kubectl get nodes |grep -vi master|grep -v NAME |awk '{print $1}' |head -$NO_OF_NODES` "${MAPR_NODES[@]}")
for i in $($SEQ $((${#MAPR_NODES[@]} - $NO_OF_RESERVE_NODES - 1)) $((${#MAPR_NODES[@]} - 1 -1)) )
do
	MAPR_RESERVE_NODES[$COUNT]="${MAPR_NODES[$i]}"
	COUNT=$((COUNT+1))
done

#Add labels for mapr nodes
echo "MAPR_ALL_NODES"
for i in $($SEQ 0 $((${#MAPR_NODES[@]} - 2)))
do
	kubectl label node ${MAPR_NODES[$i]} env=mapr-cluster-node
	echo ${MAPR_NODES[$i]}
done

echo "MAPR_CLDB_NODES"
for i in $($SEQ 0 $((NO_OF_CLDB_NODES - 1)))
do
	echo ${MAPR_NODES[$i]}
	kubectl label node ${MAPR_NODES[$i]} role=cldb --overwrite
done

echo "MAPR_DATA_NODES"
dc=0
for i in $($SEQ $NO_OF_CLDB_NODES $((NO_OF_CLDB_NODES + NO_OF_DATA_NODES - 1)) )
do
	echo ${MAPR_NODES[$i]}
	kubectl label node ${MAPR_NODES[$i]} role=data --overwrite
	dc=$((dc + 1))
	#echo $dc
done

echo "MAPR_WEB_NODES"
wc=0
for i in $($SEQ $NO_OF_DATA_NODES $((NO_OF_DATA_NODES + NO_OF_WEB_NODES - 1)) )
do
	echo ${MAPR_NODES[$i]}
	kubectl label node ${MAPR_NODES[$i]} role=web --overwrite
	dc=$((dc + 1))
	#echo $dc
done


#Add labels for zookeeper node 
echo "MAPR RESERE NODES"
rc=0
for i in $($SEQ 0 $((${#MAPR_RESERVE_NODES[@]} - 1)))
do
	 echo ${MAPR_RESERVE_NODES[$i]}
	kubectl label node ${MAPR_RESERVE_NODES[$i]} role=zk --overwrite
	rc=$((rc + 1))
	#echo $rc
done
}

addDiskForPod() {
    for i in `kubectl get nodes --show-labels |grep -i role|awk '{print $1}'|grep -v NAME`
      do
        scp -p podDiskDistributionPerNode $i:/tmp
        ssh $i /tmp/podDiskDistributionPerNode $1
      done
}

copyInitAndServicesFiles() {
    for i in `kubectl get nodes --show-labels |grep -i role|awk '{print $1}'|grep -v NAME`
      do
        scp -p ./startup_scripts/mfsnodeinit $i:/tmp
        scp -p ./startup_scripts/cldbnodeinit $i:/tmp
	scp -p ./startup_scripts/webnodeinit $i:/tmp

        scp -p ./startup_scripts/cldb-init-script $i:/tmp/cldb_podbackup
        scp -p ./startup_scripts/mfs-init-script $i:/tmp/mfs1_podbackup
        scp -p ./startup_scripts/mfs-init-script $i:/tmp/mfs2_podbackup
        scp -p ./startup_scripts/web-init-script $i:/tmp/web_podbackup
	
	scp -p ./startup_scripts/container_init_services/mfs.service $i:/tmp/mfs1_podbackup
	scp -p ./startup_scripts/container_init_services/mfs.service $i:/tmp/mfs2_podbackup
	scp -p ./startup_scripts/container_init_services/web.service $i:/tmp/web_podbackup
	scp -p ./startup_scripts/container_init_services/cldb.service $i:/tmp/cldb_podbackup
      done
}

removeConfDirectoryFromBackupBeforeStart() {
    for i in `kubectl get nodes --show-labels |grep -i role|awk '{print $1}'|grep -v NAME`
      do
	ssh $i rm -rf /tmp/cldb_podbackup/conf
	ssh $i rm -rf /tmp/mfs1_podbackup/conf
	ssh $i rm -rf /tmp/mfs2_podbackup/conf
	ssh $i rm -rf /tmp/web_podbackup/conf
     done
}

if [ $# -ne 6 ]
  then
   echo "Usage: preMapRClusterSetup <no of nodes> <no of zoo node> \
	<no of cldb nodes> \
	<no of data nodes> \
	<mo of web nodes> \
	<no of disk per pod>"
   exit 1;
fi


setupLabels $1 $2 $3 $4 $5
addDiskForPod $6
copyInitAndServicesFiles
removeConfDirectoryFromBackupBeforeStart
